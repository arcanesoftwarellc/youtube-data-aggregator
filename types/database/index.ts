/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/channels": {
    get: {
      parameters: {
        query: {
          /** unique generated id */
          id?: parameters["rowFilter.channels.id"];
          /** name of youtube channel */
          name?: parameters["rowFilter.channels.name"];
          /** YouTube channel id */
          channel?: parameters["rowFilter.channels.channel"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["channels"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** channels */
          channels?: definitions["channels"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** unique generated id */
          id?: parameters["rowFilter.channels.id"];
          /** name of youtube channel */
          name?: parameters["rowFilter.channels.name"];
          /** YouTube channel id */
          channel?: parameters["rowFilter.channels.channel"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** unique generated id */
          id?: parameters["rowFilter.channels.id"];
          /** name of youtube channel */
          name?: parameters["rowFilter.channels.name"];
          /** YouTube channel id */
          channel?: parameters["rowFilter.channels.channel"];
        };
        body: {
          /** channels */
          channels?: definitions["channels"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/videos": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.videos.id"];
          /** YouTube channel foreign key */
          channel?: parameters["rowFilter.videos.channel"];
          /** video title */
          title?: parameters["rowFilter.videos.title"];
          /** video description */
          description?: parameters["rowFilter.videos.description"];
          /** YouTube video id */
          videoId?: parameters["rowFilter.videos.videoId"];
          /** date YouTube video was published */
          publishedAt?: parameters["rowFilter.videos.publishedAt"];
          /** default resolution YouTube thumbnail */
          thumbnail_default?: parameters["rowFilter.videos.thumbnail_default"];
          /** medium resolution YouTube thumbnail */
          thumbnail_medium?: parameters["rowFilter.videos.thumbnail_medium"];
          /** high resolution YouTube thumbnail */
          thumbnail_high?: parameters["rowFilter.videos.thumbnail_high"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["videos"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** videos */
          videos?: definitions["videos"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.videos.id"];
          /** YouTube channel foreign key */
          channel?: parameters["rowFilter.videos.channel"];
          /** video title */
          title?: parameters["rowFilter.videos.title"];
          /** video description */
          description?: parameters["rowFilter.videos.description"];
          /** YouTube video id */
          videoId?: parameters["rowFilter.videos.videoId"];
          /** date YouTube video was published */
          publishedAt?: parameters["rowFilter.videos.publishedAt"];
          /** default resolution YouTube thumbnail */
          thumbnail_default?: parameters["rowFilter.videos.thumbnail_default"];
          /** medium resolution YouTube thumbnail */
          thumbnail_medium?: parameters["rowFilter.videos.thumbnail_medium"];
          /** high resolution YouTube thumbnail */
          thumbnail_high?: parameters["rowFilter.videos.thumbnail_high"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.videos.id"];
          /** YouTube channel foreign key */
          channel?: parameters["rowFilter.videos.channel"];
          /** video title */
          title?: parameters["rowFilter.videos.title"];
          /** video description */
          description?: parameters["rowFilter.videos.description"];
          /** YouTube video id */
          videoId?: parameters["rowFilter.videos.videoId"];
          /** date YouTube video was published */
          publishedAt?: parameters["rowFilter.videos.publishedAt"];
          /** default resolution YouTube thumbnail */
          thumbnail_default?: parameters["rowFilter.videos.thumbnail_default"];
          /** medium resolution YouTube thumbnail */
          thumbnail_medium?: parameters["rowFilter.videos.thumbnail_medium"];
          /** high resolution YouTube thumbnail */
          thumbnail_high?: parameters["rowFilter.videos.thumbnail_high"];
        };
        body: {
          /** videos */
          videos?: definitions["videos"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description YouTube Channels */
  channels: {
    /**
     * Format: uuid
     * @description unique generated id
     *
     * Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: text
     * @description name of youtube channel
     */
    name: string;
    /**
     * Format: text
     * @description YouTube channel id
     */
    channel?: string;
  };
  /** @description all YouTube videos */
  videos: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description YouTube channel foreign key
     *
     * Note:
     * This is a Foreign Key to `channels.id`.<fk table='channels' column='id'/>
     */
    channel: string;
    /**
     * Format: text
     * @description video title
     */
    title?: string;
    /**
     * Format: text
     * @description video description
     */
    description?: string;
    /**
     * Format: text
     * @description YouTube video id
     */
    videoId: string;
    /**
     * Format: timestamp with time zone
     * @description date YouTube video was published
     */
    publishedAt: string;
    /**
     * Format: text
     * @description default resolution YouTube thumbnail
     */
    thumbnail_default: string;
    /**
     * Format: text
     * @description medium resolution YouTube thumbnail
     */
    thumbnail_medium: string;
    /**
     * Format: text
     * @description high resolution YouTube thumbnail
     */
    thumbnail_high: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description channels */
  "body.channels": definitions["channels"];
  /**
   * Format: uuid
   * @description unique generated id
   */
  "rowFilter.channels.id": string;
  /**
   * Format: text
   * @description name of youtube channel
   */
  "rowFilter.channels.name": string;
  /**
   * Format: text
   * @description YouTube channel id
   */
  "rowFilter.channels.channel": string;
  /** @description videos */
  "body.videos": definitions["videos"];
  /** Format: uuid */
  "rowFilter.videos.id": string;
  /**
   * Format: uuid
   * @description YouTube channel foreign key
   */
  "rowFilter.videos.channel": string;
  /**
   * Format: text
   * @description video title
   */
  "rowFilter.videos.title": string;
  /**
   * Format: text
   * @description video description
   */
  "rowFilter.videos.description": string;
  /**
   * Format: text
   * @description YouTube video id
   */
  "rowFilter.videos.videoId": string;
  /**
   * Format: timestamp with time zone
   * @description date YouTube video was published
   */
  "rowFilter.videos.publishedAt": string;
  /**
   * Format: text
   * @description default resolution YouTube thumbnail
   */
  "rowFilter.videos.thumbnail_default": string;
  /**
   * Format: text
   * @description medium resolution YouTube thumbnail
   */
  "rowFilter.videos.thumbnail_medium": string;
  /**
   * Format: text
   * @description high resolution YouTube thumbnail
   */
  "rowFilter.videos.thumbnail_high": string;
}

export interface operations {}

export interface external {}
